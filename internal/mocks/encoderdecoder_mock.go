// Code generated by MockGen. DO NOT EDIT.
// Source: generate.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEncoderDecoderOfString is a mock of EncoderDecoderOfString interface.
type MockEncoderDecoderOfString struct {
	ctrl     *gomock.Controller
	recorder *MockEncoderDecoderOfStringMockRecorder
}

// MockEncoderDecoderOfStringMockRecorder is the mock recorder for MockEncoderDecoderOfString.
type MockEncoderDecoderOfStringMockRecorder struct {
	mock *MockEncoderDecoderOfString
}

// NewMockEncoderDecoderOfString creates a new mock instance.
func NewMockEncoderDecoderOfString(ctrl *gomock.Controller) *MockEncoderDecoderOfString {
	mock := &MockEncoderDecoderOfString{ctrl: ctrl}
	mock.recorder = &MockEncoderDecoderOfStringMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncoderDecoderOfString) EXPECT() *MockEncoderDecoderOfStringMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockEncoderDecoderOfString) Decode(state *string, data []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", state, data)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decode indicates an expected call of Decode.
func (mr *MockEncoderDecoderOfStringMockRecorder) Decode(state, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockEncoderDecoderOfString)(nil).Decode), state, data)
}

// Encode mocks base method.
func (m *MockEncoderDecoderOfString) Encode(state string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", state)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encode indicates an expected call of Encode.
func (mr *MockEncoderDecoderOfStringMockRecorder) Encode(state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockEncoderDecoderOfString)(nil).Encode), state)
}

// MockEncoderDecoderOfInt is a mock of EncoderDecoderOfInt interface.
type MockEncoderDecoderOfInt struct {
	ctrl     *gomock.Controller
	recorder *MockEncoderDecoderOfIntMockRecorder
}

// MockEncoderDecoderOfIntMockRecorder is the mock recorder for MockEncoderDecoderOfInt.
type MockEncoderDecoderOfIntMockRecorder struct {
	mock *MockEncoderDecoderOfInt
}

// NewMockEncoderDecoderOfInt creates a new mock instance.
func NewMockEncoderDecoderOfInt(ctrl *gomock.Controller) *MockEncoderDecoderOfInt {
	mock := &MockEncoderDecoderOfInt{ctrl: ctrl}
	mock.recorder = &MockEncoderDecoderOfIntMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncoderDecoderOfInt) EXPECT() *MockEncoderDecoderOfIntMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockEncoderDecoderOfInt) Decode(state *int, data []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", state, data)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decode indicates an expected call of Decode.
func (mr *MockEncoderDecoderOfIntMockRecorder) Decode(state, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockEncoderDecoderOfInt)(nil).Decode), state, data)
}

// Encode mocks base method.
func (m *MockEncoderDecoderOfInt) Encode(state int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", state)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encode indicates an expected call of Encode.
func (mr *MockEncoderDecoderOfIntMockRecorder) Encode(state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockEncoderDecoderOfInt)(nil).Encode), state)
}
